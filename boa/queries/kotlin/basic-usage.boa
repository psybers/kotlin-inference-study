o: output sum[project: string][file: string]{@time-out@}[location: string][isval: bool][isinferred: bool] of int; # Count

{@escape@}

location: stack of string;

kinds := {
    "return_val",
    "module",
    "body",
    "loop_variable",
    "lambda_arg"
};

{@project-filter@}
visit(input, visitor {
    {@time-or-snapshot@}
    before node: Namespace -> push(location, "module");
    after node: Namespace -> pop(location);
    before node: Declaration -> {
        foreach (i: int; def(node.methods[i]))
            visit(node.methods[i]);
        foreach (i: int; def(node.nested_declarations[i]))
            visit(node.nested_declarations[i]);
        stop;
    }
    before node: Method -> {
        file := current(ChangedFile).name;
        if (def(node.expression)) {
            isinferred := !def(node.return_type);
            o[input.id][escape(file)]{@time-part@}["return_val"][false][isinferred] << 1;
        }
        push(location, "body");
        if (def(node.expression))
            visit(node.expression);
        foreach (i: int; def(node.statements[i]))
            visit(node.statements[i]);
        pop(location);
        stop;
    }
    before node: Statement -> {
        if (node.kind == StatementKind.FOREACH) {
            push(location, "loop_variable");
            foreach (i: int; def(node.variable_declarations[i]))
                visit(node.variable_declarations[i]);
            pop(location);
            foreach (i: int; def(node.expressions[i]))
                visit(node.expressions[i]);
            foreach (i: int; def(node.statements[i]))
                visit(node.statements[i]);
            stop;
        }
    }
    before node: Expression -> {
        if (node.kind == ExpressionKind.LAMBDA) {
            push(location, "lambda_arg");
            foreach (i: int; def(node.variable_decls[i]))
                visit(node.variable_decls[i]);
            pop(location);
        }
        push(location, "body");
        foreach (i: int; def(node.expressions[i]))
            visit(node.expressions[i]);
        foreach (i: int; def(node.statements[i]))
            visit(node.statements[i]);
        pop(location);
        stop;
    }
    before node: Variable -> {
        if (!has_modifier(node, ModifierKind.IMPLICIT)) {
            file := current(ChangedFile).name;
            place := peek(location);
            isval := false;
            exists (i: int; def(node.modifiers[i]) && node.modifiers[i].kind == ModifierKind.FINAL)
                isval = true;
            isinferred := !def(node.variable_type);
            o[input.id][escape(file)]{@time-part@}[place][isval][isinferred] << 1;
        }
    }
});