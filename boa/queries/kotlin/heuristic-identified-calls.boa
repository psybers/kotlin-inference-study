o: output collection[project: string][revision: string][file: string][item: string][method_called: string] of heuristic_identified_as: string;

{@project-method-defns@}
{@kotlin-default-imports@}

{@project-or-new@}

{@escape@}

type VarMethod = {
    var: string,
    method: string
};

name_stack: stack of string;
methodNames: map[string] of set of string;
missing_file_items: map[string] of set of VarMethod;

head_revision: string;

{@project-filter@}
{
    {@collect-project-class-methods@}

    visit(input, visitor {
            before node: CodeRepository -> {
                head_revision = getrevision(node, node.head).id;
                snapshot := getsnapshot(node, "SOURCE_KOTLIN_1_");
                foreach (i: int; def(snapshot[i]))
                    visit(snapshot[i]);
                stop;
            }

            before node: ChangedFile -> {
                if (!haskey(methodNames, node.name)) {
                    empty_string_set: set of string;
                    methodNames[node.name] = empty_string_set;

                    empty_var_mtd_set: set of VarMethod;
                    missing_file_items[node.name] = empty_var_mtd_set;
                }
            }

            before node: Namespace -> {
                push(name_stack, node.name);
                foreach(i: int; def(node.imports[i])) {
                    parts := split(node.imports[i], `\.`);
                    last_item := parts[len(parts) - 1];
                    if (last_item != "*")
                        add(imported_classes, last_item);
                }
            }
            after Namespace, Method, Variable -> {
                pop(name_stack);
                clear(imported_classes);
            }

            before node: Declaration -> {
                push(name_stack, node.name);
                foreach (i: int; def(node.methods[i]))
                    visit(node.methods[i]);
                foreach (i: int; def(node.fields[i]))
                    visit(node.fields[i]);
                foreach (i: int; def(node.nested_declarations[i]))
                    visit(node.nested_declarations[i]);
                pop(name_stack);
                stop;
            }

            before node: Method -> {
                push(name_stack, node.name);
                add(methodNames[current(ChangedFile).name], node.name);
            }

            before node: Variable -> {
                push(name_stack, node.name);
                if (!has_modifier(node, ModifierKind.IMPLICIT)) {
                    if (!def(node.variable_type) && def(node.initializer) && node.initializer.kind == ExpressionKind.METHODCALL) {
                        variableName := join(".", name_stack);
                        calledName := node.initializer.method;
                        if (contains(methodNames[current(ChangedFile).name], calledName)) {
                            o[input.project_url][head_revision][escape(current(ChangedFile).name)][escape(variableName)][escape(calledName)] << project_or_new(node.initializer.method);
                        } else {
                            item: VarMethod = {
                                variableName,
                                calledName
                            };
                            add(missing_file_items[current(ChangedFile).name], item);
                        }
                    }
                }
            }

        });
}

files := keys(missing_file_items);
foreach (i: int; def(files[i])) {
    file := files[i];

    items := values(missing_file_items[file]);
    foreach (j: int; def(items[j])) {
        item := items[j];
        if (!contains(project_classes, item.method))
            o[input.project_url][head_revision][escape(file)][escape(item.var)][escape(item.method)] << project_or_new(item.method);
    }
}
