m: output collection[project: string][is_inferred: bool] of string;

{@project-filter@}
{
    visit(input, visitor {
        before node: CodeRepository -> {
            snapshot := getsnapshot(node, "SOURCE_KOTLIN_1_");
            foreach (i: int; def(snapshot[i]))
                visit(snapshot[i]);
            stop;
        }

        before node: Declaration -> {
            foreach (i: int; def(node.methods[i]))
                visit(node.methods[i]);
            foreach (i: int; def(node.fields[i]))
                visit(node.fields[i]);
            foreach (i: int; def(node.nested_declarations[i]))
                visit(node.nested_declarations[i]);
            stop;
        }

        before node: Variable -> {
            if (!has_modifier(node, ModifierKind.IMPLICIT)) {
                isinferred := !def(node.variable_type);
                rhskind := "??";
                if (def(node.initializer))
                    rhskind = string(node.initializer.kind);

                m[input.id][isinferred] << rhskind;
            }
        }
    });
}