m: output collection[project: string][is_inferred: bool] of string;

declarations: set of string;
method_names: queue of string;
inferred_queue: queue of bool;

{@project-filter@}
{
    visit(input, visitor {
        before node: CodeRepository -> {
            snapshot := getsnapshot(node, "SOURCE_KOTLIN_1_");
            foreach (i: int; def(snapshot[i]))
                visit(snapshot[i]);
            stop;
        }

        before node: Declaration -> {
            add(declarations, node.name);
            foreach (i: int; def(node.methods[i]))
                visit(node.methods[i]);
            foreach (i: int; def(node.fields[i]))
                visit(node.fields[i]);
            foreach (i: int; def(node.nested_declarations[i]))
                visit(node.nested_declarations[i]);
            stop;
        }

        before node: Variable -> {
            if (!has_modifier(node, ModifierKind.IMPLICIT)) {
                isinferred := !def(node.variable_type);
                rhskind := "??";
                if (def(node.initializer))
                    rhskind = string(node.initializer.kind);
                if (rhskind == "METHODCALL") {
                    offer(method_names, node.initializer.method);
                    offer(inferred_queue, isinferred);
                } else {
                    m[input.id][isinferred] << rhskind;
                }
            }
        }
    });
}

while(len(method_names) > 0) {
    method := poll(method_names);
    isinferred := poll(inferred_queue);
    if(contains(declarations, method)) {
        m[input.id][isinferred] << "NEW";
    } else {
        m[input.id][isinferred] << "METHODCALL";
    }
}
