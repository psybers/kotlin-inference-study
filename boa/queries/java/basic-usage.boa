o: output sum[project: string][file: string]{@time-out@}[location: string][isval: bool][isinferred: bool] of int; # Count

{@escape@}

location: stack of string;

kinds := {
    "body",
    "lambda_arg"
};

{@project-filter@}
visit(input, visitor {
    {@time-or-snapshot@}
    before node: Declaration -> {
        foreach (i: int; def(node.methods[i]))
            visit(node.methods[i]);
        foreach (i: int; def(node.nested_declarations[i]))
            visit(node.nested_declarations[i]);
        stop;
    }
    before node: Method -> {
        file := current(ChangedFile).name;
        push(location, "body");
        foreach (i: int; def(node.statements[i]))
            visit(node.statements[i]);
        pop(location);
        stop;
    }
    before node: Expression -> {
        if (node.kind == ExpressionKind.LAMBDA) {
            push(location, "lambda_arg");
            foreach (i: int; def(node.variable_decls[i]))
                visit(node.variable_decls[i]);
            pop(location);
        }
        push(location, "body");
        foreach (i: int; def(node.expressions[i]))
            visit(node.expressions[i]);
        foreach (i: int; def(node.statements[i]))
            visit(node.statements[i]);
        pop(location);
        stop;
    }
    before node: Variable -> {
        file := current(ChangedFile).name;
        place := peek(location);
        isinferred := node.variable_type.name == "var";
        o[input.id][escape(file)]{@time-part@}[place][has_modifier(node, ModifierKind.FINAL)][isinferred] << 1;
    }
});